{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0C,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAIpF,MAAM,OAAO,iBAAkB,SAAQ,SAAS;IAAhD;;QACS,cAAS,GAAkE,EAAE,CAAC;IA6CvF,CAAC;IA3CC,0BAA0B;IAC1B,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,0CAA0C;IAC1C,KAAK,CAAC,kBAAkB,CAAC,OAA4B;QACnD,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1D,sEAAsE;IACxE,CAAC;IAGD,KAAK,CAAC,WAAW,CACf,SAAiB,EACjB,YAA8B;QAE9B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SAChC;QAED,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,6BAA6B,SAAS,EAAE,CAAC,CAAC;QAEtD,qDAAqD;QACrD,OAAO;YACL,MAAM,EAAE,KAAK,IAAI,EAAE;gBACjB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAC1D,QAAQ,CAAC,EAAE,CAAC,QAAQ,KAAK,YAAY,CACtC,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,+BAA+B,SAAS,EAAE,CAAC,CAAC;YAC1D,CAAC;SACF,CAAC;IACJ,CAAC;IAED,qEAAqE;IACrE,wBAAwB,CAAC,OAAe;QACtC,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,OAAO,CAAC,CAAC;QAChE,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;QACzD,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;SACtD;IACH,CAAC;CACF","sourcesContent":["import { ListenerCallback, PluginListenerHandle, WebPlugin } from '@capacitor/core';\n\nimport type { WatchConnectorPlugin } from './definitions';\n\nexport class WatchConnectorWeb extends WebPlugin implements WatchConnectorPlugin {\n  public listeners: { [key: string]: Array<(data: { message: string }) => void> } = {};\n\n  // Echo method for testing\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n\n  // Simulate sending a message to the watch\n  async sendMessageToWatch(options: { message: string }): Promise<void> {\n    console.log('Sending message to watch:', options.message);\n    // You can implement any simulation logic or emit a message event here\n  }\n\n  \n  async addListener(\n    eventName: string,\n    listenerFunc: ListenerCallback\n  ): Promise<PluginListenerHandle> {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.listeners[eventName].push(listenerFunc);\n    console.log(`Listener added for event: ${eventName}`);\n\n    // Return a PluginListenerHandle with a remove method\n    return {\n      remove: async () => {\n        this.listeners[eventName] = this.listeners[eventName].filter(\n          listener => listener !== listenerFunc\n        );\n        console.log(`Listener removed for event: ${eventName}`);\n      },\n    };\n  }\n\n  // A method to simulate receiving a message from the watch on the web\n  simulateMessageFromWatch(message: string) {\n    console.log('Simulating message received from watch:', message);\n    const listeners = this.listeners['watchMessageReceived'];\n    if (listeners) {\n      listeners.forEach(listener => listener({ message }));\n    }\n  }\n}\n"]}